package userinterface;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;

import rmi.DAOStubFactory;
import tablemodels.UsersTableModel;
import dao.GenericDao;
import dao.PersistException;
import entity.Role;
import entity.User;

public class UsersFrame extends JFrame {

	private static final long serialVersionUID = 7167382406623182786L;
	
	public UsersFrame(User currentUser) {
		this.currentUser = currentUser;
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		
		usersTablePanel = new javax.swing.JScrollPane();
		tableModel = new UsersTableModel();
		userTable = new JTable(tableModel);
		searchField = new JTextField();
		headPanel = new javax.swing.JPanel();
		buttonPanel = new javax.swing.JPanel();
		addUserButton = new javax.swing.JButton();
		editUserButton = new javax.swing.JButton();
		deleteUserButton = new javax.swing.JButton();
		
		userTable.setAutoCreateRowSorter(true);

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Пользователи");
		setPreferredSize(new java.awt.Dimension(640, 600));
		getContentPane().setLayout(new java.awt.BorderLayout(5, 5));
		setLocation(360, 100);
		
		
		headPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5,5, 5));
		headPanel.setPreferredSize(new java.awt.Dimension(600, 40));
		headPanel.setLayout(new java.awt.BorderLayout());

		searchField.setText("Поиск");
		searchField.setMargin(new java.awt.Insets(5, 5, 5, 5));
		searchField.setMaximumSize(new java.awt.Dimension(200, 25));
		searchField.setMinimumSize(new java.awt.Dimension(200, 25));
		searchField.setPreferredSize(new java.awt.Dimension(195, 25));
		searchField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				tableModel.search(searchField.getText());
			}
		});
		searchField.addFocusListener(new FocusListener() {
		    public void focusGained(FocusEvent e) {
		    	  searchField.setText("");
		    }
			@Override
			public void focusLost(FocusEvent arg0) {
				tableModel.search(searchField.getText());
			}
		});

		usersTablePanel.setPreferredSize(new java.awt.Dimension(620, 400));
		usersTablePanel.setViewportView(userTable);		

		buttonPanel.setPreferredSize(new java.awt.Dimension(600, 35));
		
		addUserButton.setText("Добавить Пользователя");
		addUserButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				java.awt.EventQueue.invokeLater(new Runnable() {
					public void run() {
						new RegistrationForm(currentUser).setVisible(true);
					}
				});
			}
		});

		editUserButton.setText("Редактировать данные пользователя");
		deleteUserButton.setText("Удалить пользователя");
		
		editUserButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				java.awt.EventQueue.invokeLater(new Runnable() {
					public void run() {
						if (!userTable.getSelectionModel().isSelectionEmpty()) {
							try {
								User selectedUser = userDao.getByPK((Integer) userTable.getValueAt(userTable.getSelectedRow(), 0));
								new UserProfileEditForm(currentUser, selectedUser).setVisible(true);
							} catch (RemoteException | PersistException e) {
				    			e.printStackTrace();
				    			new ErrorFrame(e);
							}
							
						} else {
							JPanel statusPanel = new JPanel();
							JOptionPane.showMessageDialog(statusPanel,
									"Пользователь не выбран!");
						}
					}
				});
			}
		});

		deleteUserButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				java.awt.EventQueue.invokeLater(new Runnable() {
					public void run() {
						if (!userTable.getSelectionModel().isSelectionEmpty()) {
							try {
								User selectedUser = userDao.getByPK((Integer) userTable.getValueAt(userTable.getSelectedRow(), 0));
								selectedUser.setEnabled(false);
								userDao.update(selectedUser);
								JPanel statusPanel = new JPanel();
								JOptionPane.showMessageDialog(statusPanel,
										"Пользователь удален");
								tableModel.formDataArray();
								tableModel.fireTableDataChanged();
							} catch (RemoteException | PersistException e) {
				    			e.printStackTrace();
				    			new ErrorFrame(e);
							}

						} else {
							JPanel statusPanel = new JPanel();
							JOptionPane.showMessageDialog(statusPanel,
									"Пользователь не выбран!");
						}
					}
				});
			}
		});
		
		

		
		MouseListener tableMouseListener = new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent event) {
				int row = userTable.rowAtPoint(event.getPoint());
				int col = userTable.columnAtPoint(event.getPoint());
				if (col == 1) {
					Integer userId = (Integer) userTable.getValueAt(row, 0);
					try {
						final User userClicked = userDao.getByPK(userId);
						java.awt.EventQueue.invokeLater(new Runnable() {
							public void run() {
								new UserProfile(userClicked).setVisible(true);
							}
						});
					} catch (RemoteException | PersistException e) {
						new ErrorFrame(e);
					}
				};
			}
		};
		userTable.addMouseListener(tableMouseListener);
		
		buttonPanel.add(addUserButton);
		buttonPanel.add(editUserButton);
		buttonPanel.add(deleteUserButton);
		headPanel.add(searchField, java.awt.BorderLayout.WEST);
		getContentPane().add(headPanel, java.awt.BorderLayout.PAGE_START);
		getContentPane().add(usersTablePanel, java.awt.BorderLayout.CENTER);
		getContentPane().add(buttonPanel, java.awt.BorderLayout.PAGE_END);
   
		pack();
	}// </editor-fold>



	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				User currentUser = null;
				try {
					currentUser = userDao.getByPK(2);
				} catch (RemoteException | PersistException e) {
	    			e.printStackTrace();
	    			new ErrorFrame(e);
				}
				new UsersFrame(currentUser).setVisible(true);
			}
		});
	}
	
	// Variables declaration - do not modify
	private javax.swing.JButton addUserButton;
	private javax.swing.JButton deleteUserButton;
	private javax.swing.JButton editUserButton;
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JTable userTable;
	private javax.swing.JScrollPane usersTablePanel;
	private javax.swing.JTextField searchField;
	private javax.swing.JPanel headPanel;
	private User currentUser;
	private UsersTableModel tableModel;
	private static DAOStubFactory daoStubFactory = MainFrame.getDaoStubFactory();
	private static GenericDao<User> userDao = daoStubFactory.getUserDao();
	private static GenericDao<Role> roleDao = daoStubFactory.getRoleDao();
	private List<List<Object>> userList = new ArrayList<List<Object>>();
	// End of variables declaration
}
