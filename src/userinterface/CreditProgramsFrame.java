package userinterface;

import java.rmi.RemoteException;
import tablemodels.CreditProgramTableModel;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import rmi.DAOStubFactory;
import dao.GenericDao;
import dao.PersistException;
import entity.CreditProgram;
import entity.User;

/**
 * 
 * @author bodnar
 */
public class CreditProgramsFrame extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1175178370977298758L;
	/**
	 * Creates new form CreditRequestForm
	 */
	public CreditProgramsFrame(User currentUser) {
		this.currentUser = currentUser;
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		programsTablePanel = new javax.swing.JScrollPane();
		tableModel = new CreditProgramTableModel();
		programTable = new JTable(tableModel);
		descriptionPanel = new javax.swing.JPanel();
		descriptionLabel = new javax.swing.JLabel();
		descriptionScrollPanel = new javax.swing.JScrollPane();
		descriptionText = new javax.swing.JTextArea();
		buttonPanel = new javax.swing.JPanel();
		addProgramButton = new javax.swing.JButton();
		requestButton = new javax.swing.JButton();
		deleteProgramButton = new javax.swing.JButton();

		descriptionText.setLineWrap(true);
		descriptionText.setWrapStyleWord(true);

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Кредитные программы");
		setPreferredSize(new java.awt.Dimension(600, 600));
		getContentPane().setLayout(new java.awt.GridBagLayout());

		programTable.setAutoCreateRowSorter(true);
		programsTablePanel.setPreferredSize(new java.awt.Dimension(580, 225));

		programsTablePanel.setViewportView(programTable);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		getContentPane().add(programsTablePanel, gridBagConstraints);
		setLocation(360, 100);

		descriptionPanel.setPreferredSize(new java.awt.Dimension(580, 250));
		descriptionPanel.setLayout(new java.awt.GridBagLayout());

		descriptionLabel
				.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		descriptionLabel.setText("Описание");
		descriptionLabel.setPreferredSize(new java.awt.Dimension(580, 25));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		descriptionPanel.add(descriptionLabel, gridBagConstraints);

		descriptionScrollPanel
				.setPreferredSize(new java.awt.Dimension(555, 143));

		descriptionScrollPanel.setViewportView(descriptionText);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		descriptionPanel.add(descriptionScrollPanel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		getContentPane().add(descriptionPanel, gridBagConstraints);

		buttonPanel.setPreferredSize(new java.awt.Dimension(580, 40));
		if (currentUser.getIdRole() == 1)
			addProgramButton.setText("Добавить программу");
		addProgramButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addProgramButtonActionPerformed(evt);
			}
		});
		if (currentUser.getIdRole() == 1)
		buttonPanel.add(addProgramButton);

		requestButton.setText("Оформить заказ");
		requestButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				requestButtonActionPerformed(evt);
			}
		});
		buttonPanel.add(requestButton);

		deleteProgramButton.setText("Удалить программу");
		deleteProgramButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						deleteProgramButtonActionPerformed(evt);
					}
				});
		if (currentUser.getIdRole() == 1)
		buttonPanel.add(deleteProgramButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		getContentPane().add(buttonPanel, gridBagConstraints);

		programTable.getSelectionModel().addListSelectionListener(
				new ListSelectionListener() {
					@Override
					public void valueChanged(ListSelectionEvent e) {
						if (!programTable.getSelectionModel().isSelectionEmpty()) {
							Integer ind = ((Integer) programTable.getValueAt(
									programTable.getSelectedRow(), 0));
							CreditProgram cp = null;
							try {
								cp = creditProgramDao.getByPK(ind);
							} catch (RemoteException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							} catch (PersistException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}

							descriptionText.setText(cp.getFullDescription());
						}
					}
				});

		pack();
	}// </editor-fold>

	private void addProgramButtonActionPerformed(java.awt.event.ActionEvent evt) {
		if (currentUser.getIdRole() == 1)
			java.awt.EventQueue.invokeLater(new Runnable() {
				public void run() {
					new CreditProgramAddForm(currentUser, tableModel)
							.setVisible(true);
				}
			});
	}

	private void requestButtonActionPerformed(java.awt.event.ActionEvent evt) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {

					if (!programTable.getSelectionModel().isSelectionEmpty()) {
						CreditProgram selectedProgram = creditProgramDao
								.getByPK((Integer) programTable.getValueAt(
										programTable.getSelectedRow(), 0));
						new CreditRequestForm(currentUser, selectedProgram)
								.setVisible(true);
					} else {
						JPanel statusPanel = new JPanel();
						JOptionPane.showMessageDialog(statusPanel,
								"Кредитная программа не выбрана!");
					}
				} catch (NumberFormatException | RemoteException
						| PersistException e) {
	    			e.printStackTrace();
	    			new ErrorFrame(e);
				}

			}
		});
	}

	private void deleteProgramButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		if (currentUser.getIdRole() == 1)
			java.awt.EventQueue.invokeLater(new Runnable() {
				public void run() {
					if (!programTable.getSelectionModel().isSelectionEmpty()) {
						try {
							Integer selectedRow = programTable.getSelectedRow();
							Integer id = (Integer) programTable.getValueAt(
									selectedRow, 0);
							CreditProgram selectedProgram = creditProgramDao
									.getByPK(id);
							selectedProgram.setEnabled(false);
							creditProgramDao.update(selectedProgram);

							JPanel statusPanel = new JPanel();
							JOptionPane.showMessageDialog(statusPanel,
									"Кредитная программа с номером: " + id
											+ " удалена!");
							tableModel.formDataArray();
							tableModel.fireTableDataChanged();

						} catch (NumberFormatException | RemoteException | PersistException e) {
							// TODO Auto-generated catch block
				        	new ErrorFrame(e);
							e.printStackTrace();
						}
					} else {
						JPanel statusPanel = new JPanel();
						JOptionPane.showMessageDialog(statusPanel,
								"Кредитная программа не выбрана!");
					}

				}
			});
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				User currentUser = null;
				try {
					currentUser = userDao.getByPK(2);
				} catch (RemoteException | PersistException e) {
	    			e.printStackTrace();
	    			new ErrorFrame(e);
				}
				new CreditProgramsFrame(currentUser).setVisible(true);
			}
		});
	}
	
	// Variables declaration - do not modify
	private javax.swing.JButton addProgramButton;
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JButton deleteProgramButton;
	private javax.swing.JLabel descriptionLabel;
	private javax.swing.JPanel descriptionPanel;
	private javax.swing.JScrollPane descriptionScrollPanel;
	private javax.swing.JTextArea descriptionText;
	private javax.swing.JTable programTable;
	private javax.swing.JScrollPane programsTablePanel;
	private javax.swing.JButton requestButton;
	private User currentUser;
	private CreditProgramTableModel tableModel;
	private static DAOStubFactory daoStubFactory = MainFrame.getDaoStubFactory();
	//private GenericDao<Account> accountDao = daoStubFactory.getAccountDao();
	private GenericDao<CreditProgram> creditProgramDao = daoStubFactory.getCreditProgramDao();
	//private GenericDao<CreditRequest> creditRequestDao = daoStubFactory.getCreditRequestDao();
	//private GenericDao<Credits> creditsDao = daoStubFactory.getCreditsDao();
	//private GenericDao<Currency> currencyDao = daoStubFactory.getCurrencyDao();
	//private GenericDao<Role> roleDao = daoStubFactory.getRoleDao();
	//private GenericDao<Transaction> transactionDao = daoStubFactory.getTransactionDao();
	private static GenericDao<User> userDao = daoStubFactory.getUserDao();
	// End of variables declaration
}
